name: 'all deployment'


on:
  workflow_call:
      inputs:
        EVENT     :
          required: true
          type    : string


permissions:
      contents: read


env: 
  AWS_ECR_URL         : ${{ secrets.AWS_ECR_URL }}
  WEB_ARTIFACTS_BUCKET: archrival-front-artifacts
  IAC_ARTIFACTS_BUCKET: archrival-iac-artifacts


jobs:
  determine_versions:
      name   : determine_versions
      if     : inputs.EVENT == 'workflow_dispatch' || inputs.EVENT == 'push'
      outputs:
        platform_version: ${{ steps.determine.outputs.platform_version }}
        api_iac_version : ${{ steps.determine.outputs.api_iac_version }}
        web_iac_version : ${{ steps.determine.outputs.web_iac_version }}
        web_version     : ${{ steps.determine.outputs.web_version }}
        api_version     : ${{ steps.determine.outputs.api_version }}
      runs-on: self-hosted
      steps  :
          - name: checkout
            uses: actions/checkout@v3
          - name: determine
            id  : determine
            run : |
              echo "platform_version=$(jq -r .platform_iac < ${{ github.event.inputs.env_to_deploy }}.json) >> $GITHUB_OUTPUT
              echo "api_iac_version=$(jq -r .api_iac < ${{ github.event.inputs.env_to_deploy }}.json) >> $GITHUB_OUTPUT
              echo "web_iac_version=$(jq -r .web_iac < ${{ github.event.inputs.env_to_deploy }}.json) >> $GITHUB_OUTPUT
              echo "web_version=$(jq -r .web < ${{ github.event.inputs.env_to_deploy }}.json) >> $GITHUB_OUTPUT
              echo "api_version=$(jq -r .api < ${{ github.event.inputs.env_to_deploy }}.json) >> $GITHUB_OUTPUT


  ecrlogin:
    name   : AWS ECR login
    if     : inputs.EVENT == 'workflow_dispatch' || inputs.EVENT == 'push'
    runs-on: self-hosted
    steps  :
      - name: ECR Login
        run : |
          apt update && apt install awscli -y
          aws ecr get-login-password --region ${{secrets.AWS_DEFAULT_REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ECR_URL}} 
  

  env_deploy:
        if      : inputs.EVENT == 'workflow_dispatch' || inputs.EVENT == 'push'
        needs   : [ecrlogin]
        uses    : volodyaproject/actions/.github/workflows/tf-apply.yml@main
        with    :
            CHANGES       : 'true'
            TF_PATH       : terraform/environment
            TF_CONFIG_PATH: config/${{ github.event.inputs.env_to_deploy }}/
            IMAGE         : 159794722102.dkr.ecr.us-east-1.amazonaws.com/terraform
        secrets : inherit

  
  api_deploy:
        if      : inputs.EVENT == 'workflow_dispatch' || inputs.EVENT == 'push'
        needs   : [ecrlogin, env_deploy]
        uses    : volodyaproject/actions/.github/workflows/tf-apply.yml@main
        with    :
            CHANGES       : 'true'
            TF_PATH       : terraform/api
            TF_CONFIG_PATH: config/${{ github.event.inputs.env_to_deploy }}/
            IMAGE         : 159794722102.dkr.ecr.us-east-1.amazonaws.com/terraform
        secrets : inherit


  web_deploy:
      name     : web deploy
      needs    : [ecrlogin, env_deploy]
      if       : inputs.EVENT == 'workflow_dispatch' || inputs.EVENT == 'push'
      runs-on  : self-hosted
      container:
              image: 159794722102.dkr.ecr.us-east-1.amazonaws.com/deployer
      steps    :
            - name: build
              run : |
                apk add aws-cli jq
                jq ".[\"version\"] = \"${{ needs.reusable_version.outputs.version }}\"" package.json > temp && mv temp package.json
                aws ecr get-login-password --region ${{secrets.AWS_DEFAULT_REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ECR_URL}}
                # export DOCKER_BUILDKIT=1 && chmod +x ./scripts/run-build.sh && ./scripts/run-build.sh